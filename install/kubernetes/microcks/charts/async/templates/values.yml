appName: ""
nameOverride: ""
# namespaceOverride: ""
imagePullSecrets: []
pod:
  labels: {}
  annotations: {}
  image:
    registry: "quay.io"
    repository: "microcks/microcks-postman-runtime"
    tag: "latest"
    pullPolicy: IfNotPresent
  replicas: 1
  resources:
    requests:
      memory: 60Mi
      cpu: 50m
    limits:
      memory: 120Mi
      cpu: 100m
  logLevel: info
service:
  labels: {}
  annotations: {}
  port: 8000
  targetPort: 3000

features:
  async:
    enabled: false
    defaultBinding: KAFKA
    defaultFrequency: 10
    defaultAvroEncoding: RAW

    image: quay.io/microcks/microcks-async-minion:1.9.1

    env:
      #- name: OAUTH_CLIENT_ID
      #  value: <kafka-oauth-client-id>
      #- name: OAUTH_CLIENT_SECRET
      #  value: <kafka-oauth-client-secret>
      #- name: OAUTH_TOKEN_ENDPOINT_URI
      #  value: <kafka-oauth-endpoint-uri>

    kafka:
      install: true
      url: 192.168.99.100.nip.io
      #url: kafka-bootstrap:9092
      # Set this to your own class name if not using bare nginx
      ingressClassName: nginx
      persistent: false
      volumeSize: 2Gi
      resources:
        #requests:
          #cpu: 100m
          #memory: 256Mi
        limits:
          #cpu: 500m
          memory: 800Mi
      zkResources:
        #requests:
          #cpu: 100m
          #memory: 256Mi
        limits:
          #cpu: 500m
          memory: 800Mi
      schemaRegistry:
        #url: http://schema-registry.192.168.99.100.nip.io
        confluent: true
        username: microcks
        credentialsSource: USER_INFO

      # If you choose not to install a Kafka broker and reuse on pre-existing,
      # you may need to set some authentication parameters.
      authentication:
        # If not 'none', we support 'SSL' for mutual TLS and 'SASL_SSL' for SASL over TLS.
        type: none #SSL #SASL_SSL
        # For TLS transport, you'll always need a truststore to hold your cluster certificate.
        # You have to setup a truststore type and a secret reference for retrieving content and password.
        #truststoreType: PKCS12
        #truststoreSecretRef:
          #secret: kafka-cluster-ca-cert
          #storeKey: ca.p12
          #passwordKey: ca.password
        # For mutual TLS authentication, you'll also need a keystore to hold your user private key.
        # You have to setup a keystore type and a secret reference for retrieving content and password.
        keystoreType: PKCS12
        keystoreSecretRef:
          secret: mtls-user
          storeKey: user.p12
          passwordKey: user.password
        # For SASL authentication, you'll have to specify an additional authentication mechanism
        # as well as a JAAS configuration line with login module, username and password.
        #saslMechanism: SCRAM-SHA-512
        #saslJaasConfig: org.apache.kafka.common.security.scram.ScramLoginModule required username="scram-user" password="tDtDCT3pYKE5";
        # or an OAuth configuration (you'll need here to extend the async-minion image with your handler class implementation)
        #saslMechanism: OAUTHBEARER
        #saslJaasConfig: org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required;
        #saslLoginCallbackHandlerClass: io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

    # Uncomment the mqtt.url and put a valid endpoint address below to enable MQTT support.
    mqtt:
      #url: artemis:1883
      username: microcks
      password: microcks

    # Uncomment the amqp.url and put a valid endpoint address below to enable AMQP support.
    amqp:
      #url: rabbitmq:5672
      username: microcks
      password: microcks

    # Uncomment the nats.url and put a valid endpoint address below to enable NATS support.
    nats:
      #url: nats:4222
      username: microcks
      password: microcks

    # Uncomment the googlepubsub.project and put a valid project id below to enable PubSub support.
    googlepubsub:
      #project: my-project
      # For authentication, we rely on a Google Service Account JSON file.
      # You have to setup a secret reference for retrieving this file from secret.
      serviceAccountSecretRef:
        secret: googlecloud-service-account
        fileKey: googlecloud-service-account.json

    # Uncomment the sqs.region and put a valid region below to enable Amazon SQS support.
    sqs:
      #region: eu-west-3
      # For authentication, we rely on either Environment Variables or an AWS Profile of type credentials (see https://docs.aws.amazon.com/sdk-for-php/v3/developer-guide/guide_credentials_profiles.html).
      # You can choose between 'env-variable' and 'profile'
      credentialsType: env-variable
      #credentialsType: profile
      # For 'env-variable', you may want to specify a Secret to get environment variables from.
      #credentialsSecretRef:
        #secret: aws-credentials
        #accessKeyIdKey: access_key_id
        #secretAccessKeyKey: secret_access_key
        #sessionTokenKey: session_token
      # For 'profile', you have to provide the profile name and setup a secret reference for retrieving this file from secret.
      credentialsProfile: microcks-sqs-admin
      #credentialsSecretRef:
        #secret: aws-credentials
        #fileKey: aws.profile

    # Uncomment the sns.region and put a valid region below to enable Amazon SNS support.
    sns:
      #region: eu-west-3
      # For authentication, we rely on either Environment Variables or an AWS Profile of type credentials (see https://docs.aws.amazon.com/sdk-for-php/v3/developer-guide/guide_credentials_profiles.html).
      # You can choose between 'env-variable' and 'profile'
      credentialsType: env-variable
      #credentialsType: profile
      # For 'env-variable', you may want to specify a Secret to get environment variables from.
      #credentialsSecretRef:
        #secret: aws-credentials
        #accessKeyIdKey: access_key_id
        #secretAccessKeyKey: secret_access_key
        #sessionTokenKey: session_token
      # For 'profile', you have to provide the profile name and setup a secret reference for retrieving this file from secret.
      credentialsProfile: microcks-sns-admin
      #credentialsSecretRef:
        #secret: aws-credentials
        #fileKey: aws.profile

    ws:
      #ingressSecretRef: my-secret-for-microcks-ws-ingress
      #ingressAnnotations:
        #cert-manager.io/issuer: my-ws-cert-issuer
        #kubernetes.io/tls-acme: "true"
      #ingressClassName: nginx
      generateCert: true

  repositoryFilter:
    enabled: false
    labelKey: app
    labelLabel: Application
    labelList: app,status

  repositoryTenancy:
    enabled: false
    artifactImportAllowedRoles: admin,manager,manager-any

  microcksHub:
    enabled: true
    allowedRoles: admin,manager,manager-any

  aiCopilot:
    enabled: false
    implementation: openai
    openai:
      apiKey: sk-my-openai-api-token
      timeout: 20
      #model: gpt-3.5-turbo
      #maxTokens: 2000