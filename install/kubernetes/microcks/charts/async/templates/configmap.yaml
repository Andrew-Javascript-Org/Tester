{{- if .Values.features.async.enabled }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "{{ .Values.appName }}-async-minion-config"
  labels:
    app: "{{ .Values.appName }}"
    container: async-minion
    group: microcks
    {{- include "microcks-common-labels" . | nindent 4 }}
    {{- include "async-configmap-labels" . | nindent 4 }}
  annotations:
    {{- include "async-configmap-annotations" . | nindent 4 }}
data:
  application.properties: |-
    # Configuration file.
    %kube.quarkus.http.port={{ .Values.features.async.service.targetPort }}

    # Configure the log level.
    %kube.quarkus.log.level={{ .Values.features.async.pod.logLevel }}
    %kube.quarkus.log.console.level={{ .Values.features.async.pod.logLevel }}

    # Access to Microcks API server.
    %kube.io.github.microcks.minion.async.client.MicrocksAPIConnector/mp-rest/url=http://{{ .Values.appName }}:8080
    %kube.microcks.serviceaccount={{ .Values.features.async.configmap.keycloak.serviceAccount }}

    {{ if hasKey .Values.features.async.configmap.keycloak "uri" -}}
    # Access to Keycloak URL if you override the one coming from Microcks config
    keycloak.auth.url={{ .Values.features.async.configmap.keycloak.uri }}
    {{- end }}

    # Access to Kafka broker.
    {{- if .Values.features.async.kafka.install }}
    %kube.kafka.bootstrap.servers={{ .Values.appName }}-kafka:9092
    %kube.mp.messaging.incoming.microcks-services-updates.bootstrap.servers={{ .Values.appName }}-kafka-kafka-bootstrap:9092
    {{ else }}
    %kube.kafka.bootstrap.servers={{ .Values.features.async.kafka.url }}
    %kube.mp.messaging.incoming.microcks-services-updates.bootstrap.servers={{ .Values.features.async.kafka.url }}

      {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
    %kube.kafka.security.protocol=SSL
      {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
    %kube.kafka.ssl.truststore.location=/deployments/config/kafka/truststore/{{ .Values.features.async.kafka.authentication.truststoreSecretRef.storeKey }}
    %kube.kafka.ssl.truststore.password=${KAFKA_TRUSTSTORE_PASSWORD}
    %kube.kafka.ssl.truststore.type={{ .Values.features.async.kafka.authentication.truststoreType }}
      {{- end }}
    %kube.kafka.ssl.keystore.location=/deployments/config/kafka/keystore/{{ .Values.features.async.kafka.authentication.keystoreSecretRef.storeKey }}
    %kube.kafka.ssl.keystore.password=${KAFKA_KEYSTORE_PASSWORD}
    %kube.kafka.ssl.keystore.type={{ .Values.features.async.kafka.authentication.keystoreType }}

    %kube.mp.messaging.incoming.microcks-services-updates.security.protocol=SSL
      {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.location=/deployments/config/kafka/truststore/{{ .Values.features.async.kafka.authentication.truststoreSecretRef.storeKey }}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.password=${KAFKA_TRUSTSTORE_PASSWORD}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.type={{ .Values.features.async.kafka.authentication.truststoreType }}
      {{- end }}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.keystore.location=/deployments/config/kafka/keystore/{{ .Values.features.async.kafka.authentication.keystoreSecretRef.storeKey }}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.keystore.password=${KAFKA_KEYSTORE_PASSWORD}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.keystore.type={{ .Values.features.async.kafka.authentication.keystoreType }}
      {{- else if eq .Values.features.async.kafka.authentication.type "SASL_SSL" }}
    %kube.kafka.security.protocol=SASL_SSL
      {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
    %kube.kafka.ssl.truststore.location=/deployments/config/kafka/truststore/{{ .Values.features.async.kafka.authentication.truststoreSecretRef.storeKey }}
    %kube.kafka.ssl.truststore.password=${KAFKA_TRUSTSTORE_PASSWORD}
    %kube.kafka.ssl.truststore.type={{ .Values.features.async.kafka.authentication.truststoreType }}
      {{- end }}
    %kube.kafka.sasl.mechanism={{ .Values.features.async.kafka.authentication.saslMechanism }}
    %kube.kafka.sasl.jaas.config={{ .Values.features.async.kafka.authentication.saslJaasConfig }}
        {{- if .Values.features.async.kafka.authentication.saslLoginCallbackHandlerClass }}
    %kube.kafka.sasl.login.callback.handler.class={{ .Values.features.async.kafka.authentication.saslLoginCallbackHandlerClass }}
        {{- end }}

    %kube.mp.messaging.incoming.microcks-services-updates.security.protocol=SASL_SSL
      {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.location=/deployments/config/kafka/truststore/{{ .Values.features.async.kafka.authentication.truststoreSecretRef.storeKey }}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.password=${KAFKA_TRUSTSTORE_PASSWORD}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.type={{ .Values.features.async.kafka.authentication.truststoreType }}
      {{- end }}
    %kube.mp.messaging.incoming.microcks-services-updates.sasl.mechanism={{ .Values.features.async.kafka.authentication.saslMechanism }}
    %kube.mp.messaging.incoming.microcks-services-updates.sasl.jaas.config={{ .Values.features.async.kafka.authentication.saslJaasConfig }}
        {{- if .Values.features.async.kafka.authentication.saslLoginCallbackHandlerClass }}
    %kube.mp.messaging.incoming.microcks-services-updates.sasl.login.callback.handler.class={{ .Values.features.async.kafka.authentication.saslLoginCallbackHandlerClass }}
        {{- end }}
      {{- end }}
    {{ end }}

    {{- if .Values.features.async.kafka.schemaRegistry.url }}
    # Access to Kafka schema registry.
    %kube.kafka.schema.registry.url={{ .Values.features.async.kafka.schemaRegistry.url }}
    %kube.kafka.schema.registry.confluent={{ .Values.features.async.kafka.schemaRegistry.confluent }}
    %kube.kafka.schema.registry.username={{ .Values.features.async.kafka.schemaRegistry.username | default "" }}
    %kube.kafka.schema.registry.credentials.source={{ .Values.features.async.kafka.schemaRegistry.credentialsSource | default "USER_INFO" }}
    {{ end }}

    {{- if .Values.features.async.mqtt.url }}
    # Access to MQTT broker.
    %kube.mqtt.server={{ .Values.features.async.mqtt.url }}
    %kube.mqtt.username={{ .Values.features.async.mqtt.username }}
    %kube.mqtt.password={{ .Values.features.async.mqtt.password }}
    {{- end }}

    {{- if .Values.features.async.amqp.url }}
    # Access to AMQP broker.
    %kube.amqp.server={{ .Values.features.async.amqp.url }}
    %kube.amqp.username={{ .Values.features.async.amqp.username }}
    %kube.amqp.password={{ .Values.features.async.amqp.password }}
    {{- end }}

    {{- if .Values.features.async.nats.url }}
    # Access to NATS broker.
    %kube.nats.server={{ .Values.features.async.nats.url }}
    %kube.nats.username={{ .Values.features.async.nats.username }}
    %kube.nats.password={{ .Values.features.async.nats.password }}
    {{- end }}

    {{- if .Values.features.async.googlepubsub.project }}
    # Access to Google PubSub.
    %kube.googlepubsub.project={{ .Values.features.async.googlepubsub.project }}
      {{- if .Values.features.async.googlepubsub.serviceAccountSecretRef.fileKey }}
    %kube.googlepubsub.service-account-location=/deployments/config/googlepubsub/sa/{{ .Values.features.async.googlepubsub.serviceAccountSecretRef.fileKey }}
      {{- end }}
    {{- end }}

    {{- if .Values.features.async.sqs.region }}
    # Access to Amazon SQS.
    %kube.amazonsqs.region={{ .Values.features.async.sqs.region }}
    %kube.amazonsqs.credentials-type={{ .Values.features.async.sqs.credentialsType }}
      {{- if eq .Values.features.async.sqs.credentialsType "profile" }}
    %kube.amazonsqs.credentials-profile-name={{ .Values.features.async.sqs.credentialsProfile }}
        {{- if .Values.features.async.sqs.credentialsSecretRef.fileKey }}
    %kube.amazonsqs.credentials-profile-location=/deployments/config/amazon-sqs/{{ .Values.features.async.sqs.credentialsSecretRef.fileKey }}
        {{- end }}
      {{- end }}
    {{- if .Values.features.async.sqs.endpointOverride }}
    %kube.amazonsqs.endpoint-override={{ .Values.features.async.sqs.endpointOverride }}
    {{- end }}
    {{- end }}

    {{- if .Values.features.async.sns.region }}
    # Access to Amazon SNS.
    %kube.amazonsns.region={{ .Values.features.async.sns.region }}
    %kube.amazonsns.credentials-type={{ .Values.features.async.sns.credentialsType }}
      {{- if eq .Values.features.async.sns.credentialsType "profile" }}
    %kube.amazonsns.credentials-profile-name={{ .Values.features.async.sns.credentialsProfile }}
        {{- if .Values.features.async.sns.credentialsSecretRef.fileKey }}
    %kube.amazonsns.credentials-profile-location=/deployments/config/amazon-sns/{{ .Values.features.async.sns.credentialsSecretRef.fileKey }}
        {{- end }}
      {{- end }}
    {{- if .Values.features.async.sns.endpointOverride }}
    %kube.amazonsns.endpoint-override={{ .Values.features.async.sns.endpointOverride }}
    {{- end }}
    {{- end }}

    # Configure the minion own behavioral properties.
    %kube.minion.supported-bindings=KAFKA,WS{{ if .Values.features.async.mqtt.url }},MQTT{{ end }}{{ if .Values.features.async.amqp.url }},AMQP{{ end }}{{ if .Values.features.async.nats.url }},NATS{{ end }}{{ if .Values.features.async.googlepubsub.project }},GOOGLEPUBSUB{{ end }}{{ if .Values.features.async.sqs.region }},SQS{{ end }}{{ if .Values.features.async.sns.region }},SNS{{ end }}
    %kube.minion.restricted-frequencies=3,10,30
    %kube.minion.default-avro-encoding={{ .Values.features.async.defaultAvroEncoding }}
{{- end -}}