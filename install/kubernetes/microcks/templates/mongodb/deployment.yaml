{{- if and .Values.mongodb.install }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}-mongodb"
  labels:
    app: "{{ .Values.appName }}"
    container: mongodb
    group: microcks
    {{- include "microcks-common-labels" . | nindent 4 }}
  annotations:
    {{- include "microcks-common-annotations" . | nindent 4 }}

  creationTimestamp:
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: mongodb
      container: mongodb
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: mongodb
        container: mongodb
        group: microcks
        {{- include "microcks-common-labels" . | nindent 8 }}
      annotations:
        {{- include "microcks-common-annotations" . | nindent 8 }}
    spec:
      {{- if not (.Capabilities.APIVersions.Has "route.openshift.io/v1/Route") }}
      securityContext:
        runAsUser: 184
        runAsGroup: 184
        fsGroup: 184
      {{- end }}
      containers:
        - name: mongodb
          image: "{{ .Values.global.image.registry | default .Values.mongodb.image.registry }}/{{ .Values.mongodb.image.repository }}:{{ .Values.mongodb.image.tag }}"
          imagePullPolicy: {{ .Values.mongodb.image.pullPolicy }}
          ports:
            - containerPort: 27017
              protocol: TCP
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 3
            exec:
              command:
                - "/bin/sh"
                - "-i"
                - "-c"
                - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                  --eval="quit()"
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 27017
          env:
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  key: username
                  name: "{{ .Values.appName }}-mongodb-connection"
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: "{{ .Values.appName }}-mongodb-connection"
            - name: MONGODB_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: adminPassword
                  name: "{{ .Values.appName }}-mongodb-connection"
            - name: MONGODB_DATABASE
              value: "{{ .Values.appName }}"
          resources:
          {{- toYaml .Values.mongodb.resources | nindent 10 }}
          volumeMounts:
            - name: "{{ .Values.appName }}-mongodb-data"
              mountPath: "/var/lib/mongodb/data"
          terminationMessagePath: "/dev/termination-log"
          securityContext:
            capabilities: {}
            privileged: false
      volumes:
        - name: "{{ .Values.appName }}-mongodb-data"
        {{- if .Values.mongodb.persistent }}
          persistentVolumeClaim:
            claimName: "{{ .Values.appName }}-mongodb"
        {{- else }}
          emptyDir:
            medium: ''
        {{- end }}
      restartPolicy: Always
      dnsPolicy: ClusterFirst
{{- end }}
