kind: ConfigMap
apiVersion: v1
metadata:
  name: "{{ .Values.appName }}-config"
  labels:
    app: "{{ .Values.appName }}"
    container: spring
    group: microcks
    {{- include "microcks-common-labels" . | nindent 4 }}
  annotations:
    {{- include "microcks-async-annotations" . | nindent 4 }}
data:
  features.properties: |-
    features.feature.microcks-hub.enabled={{ .Values.features.microcksHub.enabled }}
    features.feature.microcks-hub.endpoint=https://hub.microcks.io/api
    features.feature.microcks-hub.allowed-roles={{ .Values.features.microcksHub.allowedRoles }}

    features.feature.repository-filter.enabled={{ .Values.features.repositoryFilter.enabled }}
    features.feature.repository-filter.label-key={{ .Values.features.repositoryFilter.labelKey }}
    features.feature.repository-filter.label-label={{ .Values.features.repositoryFilter.labelLabel }}
    features.feature.repository-filter.label-list={{ .Values.features.repositoryFilter.labelList }}

    features.feature.repository-tenancy.enabled={{ .Values.features.repositoryTenancy.enabled }}
    features.feature.repository-tenancy.artifact-import-allowed-roles={{ .Values.features.repositoryTenancy.artifactImportAllowedRoles }}

    features.feature.async-api.enabled={{ .Values.features.async.enabled }}
    features.feature.async-api.default-binding={{ .Values.features.async.defaultBinding }}
    features.feature.async-api.endpoint-WS={{ ( include "microcks-ws.url" . ) }}
    {{- if eq .Values.features.async.kafka.install true }}
    features.feature.async-api.endpoint-KAFKA={{ .Values.appName }}-kafka.{{ .Values.features.async.kafka.url }}:443
    {{- else }}
    features.feature.async-api.endpoint-KAFKA={{ .Values.features.async.kafka.url }}
    {{- end }}
    {{- if .Values.features.async.mqtt.url }}
    features.feature.async-api.endpoint-MQTT={{ .Values.features.async.mqtt.url }}
    {{- end }}
    {{- if .Values.features.async.amqp.url }}
    features.feature.async-api.endpoint-AMQP={{ .Values.features.async.amqp.url }}
    {{- end }}
    {{- if .Values.features.async.nats.url }}
    features.feature.async-api.endpoint-NATS={{ .Values.features.async.nats.url }}
    {{- end }}
    {{- if .Values.features.async.googlepubsub.project }}
    features.feature.async-api.endpoint-GOOGLEPUBSUB={{ .Values.features.async.googlepubsub.project }}
    {{- end }}
    {{- if .Values.features.async.sqs.region }}
    features.feature.async-api.endpoint-SQS={{ .Values.features.async.sqs.region }}{{ if .Values.features.async.sqs.endpointOverride }} at {{ .Values.features.async.sqs.endpointOverride }}{{ end }}
    {{- end }}
    {{- if .Values.features.async.sns.region }}
    features.feature.async-api.endpoint-SNS={{ .Values.features.async.sns.region }}{{ if .Values.features.async.sns.endpointOverride }} at {{ .Values.features.async.sns.endpointOverride }}{{ end }}
    {{- end }}

    features.feature.ai-copilot.enabled={{ .Values.features.aiCopilot.enabled }}
  application.properties: |-
    # Application configuration properties
    tests-callback.url=${TEST_CALLBACK_URL}
    postman-runner.url=${POSTMAN_RUNNER_URL}
    async-minion.url=${ASYNC_MINION_URL|http://localhost:8081}

    network.username=
    network.password=

    validation.resourceUrl=http://{{ .Values.microcks.url }}/api/resources/
    services.update.interval=${SERVICES_UPDATE_INTERVAL:0 0 0/2 * * *}
    mocks.rest.enable-cors-policy=${ENABLE_CORS_POLICY:true}
    {{- if eq .Values.microcks.mockInvocationStats false }}
    mocks.enable-invocation-stats=false
    {{- end }}

    # Logging configuration properties
    logging.config=/deployments/config/logback.xml

    # Spring Security adapter configuration properties
    spring.security.oauth2.client.registration.keycloak.client-id=microcks-app
    spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
    spring.security.oauth2.client.registration.keycloak.scope=openid,profile
    spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_URL}/realms/${keycloak.realm}
    spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
    spring.security.oauth2.resourceserver.jwt.issuer-uri=${sso.public-url}/realms/${keycloak.realm}
    {{- if hasKey .Values.keycloak "privateUrl" }}
    spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_URL}/realms/${keycloak.realm}/protocol/openid-connect/certs
    {{- end }}

    # Keycloak configuration properties
    keycloak.auth-server-url=${KEYCLOAK_URL}
    keycloak.realm={{ .Values.keycloak.realm }}
    keycloak.resource=microcks-app
    keycloak.use-resource-role-mappings=true
    keycloak.bearer-only=true
    keycloak.ssl-required=external
    keycloak.disable-trust-manager=true

    # Keycloak access configuration properties
    sso.public-url=${KEYCLOAK_PUBLIC_URL:${keycloak.auth-server-url}}

    # Async mocking support.
    async-api.enabled={{ .Values.features.async.enabled }}
    async-api.default-binding={{ .Values.features.async.defaultBinding }}
    async-api.default-frequency={{ .Values.features.async.defaultFrequency }}

    # Kafka configuration properties
    spring.kafka.producer.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVER:localhost:9092}
    {{- if eq .Values.features.async.kafka.install false }}
      {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
    spring.kafka.producer.properties.security.protocol=SSL
      {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
    spring.kafka.producer.properties.ssl.truststore.location=/deployments/config/kafka/truststore/{{ .Values.features.async.kafka.authentication.truststoreSecretRef.storeKey }}
    spring.kafka.producer.properties.ssl.truststore.password=${KAFKA_TRUSTSTORE_PASSWORD}
    spring.kafka.producer.properties.ssl.truststore.type={{ .Values.features.async.kafka.authentication.truststoreType }}
      {{- end }}
    spring.kafka.producer.properties.ssl.keystore.location=/deployments/config/kafka/keystore/{{ .Values.features.async.kafka.authentication.keystoreSecretRef.storeKey }}
    spring.kafka.producer.properties.ssl.keystore.password=${KAFKA_KEYSTORE_PASSWORD}
    spring.kafka.producer.properties.ssl.keystore.type={{ .Values.features.async.kafka.authentication.keystoreType }}
      {{- else if eq .Values.features.async.kafka.authentication.type "SASL_SSL" }}
    spring.kafka.producer.properties.security.protocol=SASL_SSL
      {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
    spring.kafka.producer.properties.ssl.truststore.location=/deployments/config/kafka/truststore/{{ .Values.features.async.kafka.authentication.truststoreSecretRef.storeKey }}
    spring.kafka.producer.properties.ssl.truststore.password=${KAFKA_TRUSTSTORE_PASSWORD}
    spring.kafka.producer.properties.ssl.truststore.type={{ .Values.features.async.kafka.authentication.truststoreType }}
      {{- end }}
    spring.kafka.producer.properties.sasl.mechanism={{ .Values.features.async.kafka.authentication.saslMechanism }}
    spring.kafka.producer.properties.sasl.jaas.config={{ .Values.features.async.kafka.authentication.saslJaasConfig }}
        {{- if .Values.features.async.kafka.authentication.saslLoginCallbackHandlerClass }}
    spring.kafka.producer.properties.sasl.login.callback.handler.class={{ .Values.features.async.kafka.authentication.saslLoginCallbackHandlerClass }}
        {{- end }}
      {{- end }}
    {{- end }}

    {{- if (.Values.microcks.grpcEnableTLS) }}

    # Grpc server properties
    grpc.server.certChainFilePath=/deployments/config/grpc/tls.crt
    grpc.server.privateKeyFilePath=/deployments/config/grpc/tls.key
    {{- end }}

    # AI Copilot configuration properties
    ai-copilot.enabled={{ .Values.features.aiCopilot.enabled }}
    ai-copilot.implementation={{ .Values.features.aiCopilot.implementation }}
    {{- if eq .Values.features.aiCopilot.implementation "openai" }}
    ai-copilot.openai.api-key={{ .Values.features.aiCopilot.openai.apiKey }}
      {{- if .Values.features.aiCopilot.openai.timeout }}
    ai-copilot.openai.timeout={{ .Values.features.aiCopilot.openai.timeout }}
      {{- end }}
      {{- if .Values.features.aiCopilot.openai.model }}
    ai-copilot.openai.model={{ .Values.features.aiCopilot.openai.model }}
      {{- end }}
      {{- if .Values.features.aiCopilot.openai.maxTokens }}
    ai-copilot.openai.maxTokens={{ .Values.features.aiCopilot.openai.maxTokens }}
      {{- end }}
    {{- end }}
  logback.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>

    <configuration scan="true">
      <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
          <charset>utf-8</charset>
          <Pattern>%d{HH:mm:ss.SSS} [%p] %c - %m%n</Pattern>
        </encoder>
      </appender>

      <logger name="io.github.microcks" level="{{ .Values.microcks.logLevel }}"/>
      <!-- Change com.mongodb to org.mongodb so that com.mongodb.FongoDBCollection is ignored, set to debug and tests do not fail... -->
      <logger name="org.mongodb" level="INFO"/>
      <logger name="org.springframework.data.mongodb" level="INFO"/>
      <logger name="org.reflections" level="WARN"/>
      <logger name="sun.net.www.protocol.http" level="INFO"/>

      <logger name="jdk.event.security" level="WARN"/>
      <logger name="javax.activation" level="WARN"/>
      <logger name="javax.mail" level="WARN"/>
      <logger name="javax.xml.bind" level="WARN"/>
      <logger name="ch.qos.logback" level="WARN"/>
      <logger name="com.codahale.metrics" level="WARN"/>
      <logger name="com.ryantenney" level="WARN"/>
      <logger name="com.sun.xml.internal.bind" level="WARN"/>
      <logger name="com.zaxxer" level="WARN"/>
      <logger name="io.undertow" level="WARN"/>
      <logger name="org.apache" level="WARN"/>
      <logger name="org.apache.catalina.startup.DigesterFactory" level="OFF"/>
      <logger name="org.bson" level="WARN"/>
      <logger name="org.hibernate.validator" level="WARN"/>
      <logger name="org.hibernate" level="WARN"/>
      <logger name="org.hibernate.ejb.HibernatePersistence" level="OFF"/>
      <logger name="org.springframework" level="WARN"/>
      <logger name="org.springframework.aop" level="WARN"/>
      <logger name="org.springframework.web" level="WARN"/>
      <logger name="org.springframework.security" level="WARN"/>
      <logger name="org.springframework.cache" level="WARN"/>
      <logger name="org.springframework.scheduling" level="WARN"/>
      <logger name="org.thymeleaf" level="WARN"/>
      <logger name="org.xnio" level="WARN"/>
      <logger name="com.mangofactory.swagger" level="WARN"/>
      <logger name="sun.rmi.transport" level="WARN"/>

      <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
        <resetJUL>true</resetJUL>
      </contextListener>

      <root level="INFO">
        <appender-ref ref="CONSOLE"/>
      </root>
    </configuration>
{{- if .Values.microcks.extraProperties }}
  application-extra.yaml: |-
  {{- with .Values.microcks.extraProperties }}
  {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}


