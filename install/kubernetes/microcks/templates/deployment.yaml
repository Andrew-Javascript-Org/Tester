apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}"
  labels:
    app: "{{ .Values.appName }}"
    container: spring
    group: microcks
    {{- include "microcks-common-labels" . | nindent 4 }}
  annotations:
    {{- include "microcks-common-annotations" . | nindent 4 }}
spec:
  replicas: {{ .Values.microcks.replicas }}
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: "{{ .Values.appName }}"
      container: spring
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: "{{ .Values.appName }}"
        container: spring
        group: microcks
        {{- include "microcks-common-labels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- include "microcks-common-annotations" . | nindent 8 }}
    spec:
      {{- with .Values.global.image.pullSecrets | default .Values.microcks.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 4 }}
      {{- end }}
      {{- if .Values.microcks.initContainers }}
      initContainers:
        {{- with .Values.microcks.initContainers }}
        {{- toYaml . | nindent 4 }}
        {{- end }}
      {{- end }}
      containers:
      - name: spring
        image: {{ .Values.global.image.registry | default .Values.microcks.image.registry }}/{{ .Values.microcks.image.repository }}{{ include "microcks.imageId" . }}
        imagePullPolicy: {{ .Values.microcks.image.pullPolicy }}
        ports:
        - containerPort: 8080
          protocol: TCP
        env:
          - name: JAVA_OPTIONS
            value: "-XX:+TieredCompilation -XX:TieredStopAtLevel=2"
          - name: JAVA_MAJOR_VERSION
            value: "11"
          - name: SPRING_PROFILES_ACTIVE
            value: prod{{ if .Values.microcks.extraProperties }},extra{{ end }}
          - name: SPRING_DATA_MONGODB_URI
            value: mongodb://${SPRING_DATA_MONGODB_USER}:${SPRING_DATA_MONGODB_PASSWORD}@{{ .Values.mongodb.uri | default (print .Values.appName "-mongodb:27017") }}/${SPRING_DATA_MONGODB_DATABASE}{{ .Values.mongodb.uriParameters }}
          - name: SPRING_DATA_MONGODB_USER
            valueFrom:
              secretKeyRef:
                {{- if hasKey .Values.mongodb "secretRef" }}
                key: {{ .Values.mongodb.secretRef.usernameKey | default "username" }}
                name: {{ .Values.mongodb.secretRef.secret | default (print .Values.appName "-mongodb-connection") }}
                {{- else }}
                key: username
                name: "{{ .Values.appName }}-mongodb-connection"
                {{- end }}
          - name: SPRING_DATA_MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                {{- if hasKey .Values.mongodb "secretRef" }}
                key: {{ .Values.mongodb.secretRef.passwordKey | default "password" }}
                name: {{ .Values.mongodb.secretRef.secret | default (print .Values.appName "-mongodb-connection") }}
                {{- else }}
                key: password
                name: "{{ .Values.appName }}-mongodb-connection"
                {{- end }}
          - name: SPRING_DATA_MONGODB_DATABASE
            value: {{ .Values.mongodb.database | default .Values.appName }}
          - name: POSTMAN_RUNNER_URL
            value: http://{{ .Values.appName }}-postman-runtime:8080
          - name: TEST_CALLBACK_URL
            value: http://{{ .Values.appName }}:8080
          - name: KEYCLOAK_ENABLED
            value: "{{ .Values.keycloak.enabled }}"
          {{- if hasKey .Values.keycloak "privateUrl" }}
          - name: KEYCLOAK_URL
            value: "{{ .Values.keycloak.privateUrl }}"
          - name: KEYCLOAK_PUBLIC_URL
            value: https://{{ .Values.keycloak.url }}
          {{- else }}
          - name: KEYCLOAK_URL
            value: https://{{ .Values.keycloak.url }}
          {{- end }}
          {{- if and .Values.features.async.enabled }}
          - name: ASYNC_MINION_URL
            value: http://{{ .Values.appName }}-async-minion:8080
          {{- end }}
          - name: KAFKA_BOOTSTRAP_SERVER
            {{- if eq .Values.features.async.kafka.install true }}
            value: "{{ .Values.appName }}-kafka-kafka-bootstrap:9092"
            {{- else }}
            value: "{{ .Values.features.async.kafka.url }}"
            {{- end }}
          {{- if eq .Values.features.async.kafka.install false }}
            {{- if not (eq .Values.features.async.kafka.authentication.type "none") }}
            {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
          - name: KAFKA_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: {{ .Values.features.async.kafka.authentication.truststoreSecretRef.passwordKey }}
                name: "{{ .Values.appName }}-kafka-truststore"
            {{- end }}
            {{- end }}
            {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
          - name: KAFKA_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: {{ .Values.features.async.kafka.authentication.keystoreSecretRef.passwordKey }}
                name: "{{ .Values.appName }}-kafka-keystore"
            {{- end }}
          {{- end }}
          {{- toYaml .Values.microcks.env | nindent 10 }}
        resources:
          {{- toYaml .Values.microcks.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 25
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 35
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 10
        volumeMounts:
          - name: "{{ .Values.appName }}-config"
            mountPath: "/deployments/config"
          - name: "{{ .Values.appName }}-grpc-certs"
            mountPath: "/deployments/config/grpc"
          {{- if eq .Values.features.async.kafka.install false }}
            {{- if not (eq .Values.features.async.kafka.authentication.type "none") }}
            {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
          - name: "{{ .Values.appName }}-kafka-truststore"
            mountPath: "/deployments/config/kafka/truststore"
            {{- end }}
            {{- end }}
            {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
          - name: "{{ .Values.appName }}-kafka-keystore"
            mountPath: "/deployments/config/kafka/keystore"
            {{- end }}
          {{- end }}
          {{- if .Values.microcks.customSecretRef }}
          - name: "{{ .Values.microcks.customSecretRef.secret }}"
            mountPath: "/deployments/config/custom/secret/{{ .Values.microcks.customSecretRef.key }}"
            subPath: "{{ .Values.microcks.customSecretRef.key }}"
          {{- end}}
          {{- with .Values.microcks.extraVolumeMounts }}
          {{- toYaml . | nindent 12 }}
          {{- end }}
        terminationMessagePath: "/dev/termination-log"
        {{- with .Values.microcks.extraContainers }}
          {{- toYaml . | nindent 4 }}
        {{- end}}
      volumes:
        - name: "{{ .Values.appName }}-config"
          configMap:
            name: "{{ .Values.appName }}-config"
        - name: "{{ .Values.appName }}-grpc-certs"
          secret:
            secretName: "{{ .Values.microcks.grpcSecretRef | default (print .Values.appName "-microcks-grpc-secret") }}"
        {{- if eq .Values.features.async.kafka.install false }}
          {{- if not (eq .Values.features.async.kafka.authentication.type "none") }}
          {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
        - name: "{{ .Values.appName }}-kafka-truststore"
          secret:
            secretName: "{{ .Values.features.async.kafka.authentication.truststoreSecretRef.secret }}"
          {{- end }}
          {{- end }}
          {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
        - name: "{{ .Values.appName }}-kafka-keystore"
          secret:
            secretName: "{{ .Values.features.async.kafka.authentication.keystoreSecretRef.secret }}"
          {{- end }}
        {{- end }}
        {{- if .Values.microcks.customSecretRef }}
        - name: "{{ .Values.microcks.customSecretRef.secret }}"
          secret:
            secretName: "{{ .Values.microcks.customSecretRef.secret }}"
        {{- end }}
        {{- if .Values.microcks.extraVolumes }}
        {{- toYaml .Values.microcks.extraVolumes | nindent 4 }}
        {{- end }}
{{- if and .Values.features.async.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}-async-minion"
  labels:
    app: "{{ .Values.appName }}"
    container: async-minion
    group: microcks
    {{- include "microcks-common-labels" . | nindent 4 }}
  annotations:
    {{- include "microcks-common-annotations" . | nindent 4 }}

spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: async-minion
      container: async-minion
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: async-minion
        container: async-minion
        group: microcks
        {{- include "microcks-common-labels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- include "microcks-common-annotations" . | nindent 8 }}
    spec:
      containers:
      - name: async-minion
        image: "{{ .Values.global.image.registry | default .Values.features.async.image.registry }}/{{ .Values.features.async.image.repository }}:{{ .Values.features.async.image.tag }}"
        imagePullPolicy: {{ .Values.features.async.image.pullPolicy }}
        imagePullPolicy: IfNotPresent
        env:
          - name: QUARKUS_PROFILE
            value: kube
          {{- if eq .Values.features.async.kafka.install false }}
            {{- if not (eq .Values.features.async.kafka.authentication.type "none") }}
            {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
          - name: KAFKA_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: {{ .Values.features.async.kafka.authentication.truststoreSecretRef.passwordKey }}
                name: "{{ .Values.appName }}-kafka-truststore"
            {{- end }}
            {{- end }}
            {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
          - name: KAFKA_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: {{ .Values.features.async.kafka.authentication.keystoreSecretRef.passwordKey }}
                name: "{{ .Values.appName }}-kafka-keystore"
            {{- end }}
          {{- end }}
          {{- if .Values.features.async.sqs.region }}
            {{- if eq .Values.features.async.sqs.credentialsType "env-variable" }}
            {{- if .Values.features.async.sqs.credentialsSecretRef }}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.features.async.sqs.credentialsSecretRef.secret }}
                key: {{ .Values.features.async.sqs.credentialsSecretRef.accessKeyIdKey }}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.features.async.sqs.credentialsSecretRef.secret }}
                key: {{ .Values.features.async.sqs.credentialsSecretRef.secretAccessKeyKey }}
              {{- if .Values.features.async.sqs.credentialsSecretRef.sessionTokenKey }}
          - name: AWS_SESSION_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ .Values.features.async.sqs.credentialsSecretRef.secret }}
                key: {{ .Values.features.async.sqs.credentialsSecretRef.sessionTokenKey }}
              {{- end }}
            {{- end }}
            {{- end }}
          {{- end }}
          {{- if .Values.features.async.sns.region }}
            {{- if eq .Values.features.async.sns.credentialsType "env-variable" }}
            {{- if .Values.features.async.sns.credentialsSecretRef }}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.features.async.sns.credentialsSecretRef.secret }}
                key: {{ .Values.features.async.sns.credentialsSecretRef.accessKeyIdKey }}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.features.async.sns.credentialsSecretRef.secret }}
                key: {{ .Values.features.async.sns.credentialsSecretRef.secretAccessKeyKey }}
              {{- if .Values.features.async.sns.credentialsSecretRef.sessionTokenKey }}
          - name: AWS_SESSION_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ .Values.features.async.sns.credentialsSecretRef.secret }}
                key: {{ .Values.features.async.sns.credentialsSecretRef.sessionTokenKey }}
              {{- end }}
            {{- end }}
            {{- end }}
          {{- end }}
          {{- if .Values.features.async.env }}
          {{- toYaml .Values.features.async.env | nindent 10 }}
          {{- end }}
        ports:
        - containerPort: 8080
          protocol: TCP
        livenessProbe:
          httpGet:
            path: "/q/health/live"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 2
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/q/health/ready"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 2
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
          - name: "{{ .Values.appName }}-async-minion-config"
            mountPath: "/deployments/config"
          {{- if eq .Values.features.async.kafka.install false }}
            {{- if not (eq .Values.features.async.kafka.authentication.type "none") }}
            {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
          - name: "{{ .Values.appName }}-kafka-truststore"
            mountPath: "/deployments/config/kafka/truststore"
            {{- end }}
            {{- end }}
            {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
          - name: "{{ .Values.appName }}-kafka-keystore"
            mountPath: "/deployments/config/kafka/keystore"
            {{- end }}
          {{- end }}
          {{- if .Values.features.async.googlepubsub.project }}
            {{- if .Values.features.async.googlepubsub.serviceAccountSecretRef }}
          - name: "{{ .Values.appName }}-googlepubsub-sa"
            mountPath: "/deployments/config/googlepubsub/sa"
            {{- end }}
          {{- end }}
          {{- if .Values.features.async.sqs.region }}
            {{- if .Values.features.async.sqs.credentialsSecretRef }}
            {{- if eq .Values.features.async.sqs.credentialsType "profile" }}
          - name: "{{ .Values.appName }}-amazonsqs-creds"
            mountPath: "/deployments/config/amazon-sqs"
            {{- end }}
            {{- end }}
          {{- end }}
          {{- if .Values.features.async.sns.region }}
            {{- if .Values.features.async.sns.credentialsSecretRef }}
            {{- if eq .Values.features.async.sns.credentialsType "profile" }}
          - name: "{{ .Values.appName }}-amazonsns-creds"
            mountPath: "/deployments/config/amazon-sns"
            {{- end }}
            {{- end }}
          {{- end }}
        terminationMessagePath: "/dev/termination-log"
      volumes:
        - name: "{{ .Values.appName }}-async-minion-config"
          configMap:
            name: "{{ .Values.appName }}-async-minion-config"
        {{- if eq .Values.features.async.kafka.install false }}
          {{- if not (eq .Values.features.async.kafka.authentication.type "none") }}
          {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
        - name: "{{ .Values.appName }}-kafka-truststore"
          secret:
            secretName: "{{ .Values.features.async.kafka.authentication.truststoreSecretRef.secret }}"
          {{- end }}
          {{- end }}
          {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
        - name: "{{ .Values.appName }}-kafka-keystore"
          secret:
            secretName: "{{ .Values.features.async.kafka.authentication.keystoreSecretRef.secret }}"
          {{- end }}
        {{- end }}
        {{- if .Values.features.async.googlepubsub.project }}
          {{- if .Values.features.async.googlepubsub.serviceAccountSecretRef }}
        - name: "{{ .Values.appName }}-googlepubsub-sa"
          secret:
            secretName: "{{ .Values.features.async.googlepubsub.serviceAccountSecretRef.secret }}"
          {{- end }}
        {{- end }}
        {{- if .Values.features.async.sqs.region }}
          {{- if .Values.features.async.sqs.credentialsSecretRef }}
          {{- if eq .Values.features.async.sqs.credentialsType "profile" }}
        - name: "{{ .Values.appName }}-amazonsqs-creds"
          secret:
            secretName: "{{ .Values.features.async.sqs.credentialsSecretRef.secret }}"
          {{- end }}
          {{- end }}
        {{- end }}
        {{- if .Values.features.async.sns.region }}
          {{- if .Values.features.async.sns.credentialsSecretRef }}
          {{- if eq .Values.features.async.sns.credentialsType "profile" }}
        - name: "{{ .Values.appName }}-amazonsns-creds"
          secret:
            secretName: "{{ .Values.features.async.sns.credentialsSecretRef.secret }}"
          {{- end }}
          {{- end }}
        {{- end }}
{{- end }}
